Misconception
There is an ambiguity between binary semaphore and mutex. We might have come 
across that a mutex is a binary semaphore. But it is not! The purposes of mutex 
and semaphore are different. Maybe, due to similarity in their implementation a 
mutex would be referred to as a binary semaphore. 

A mutex is a locking mechanism used to synchronize access to a resource. Only one 
task (can be a thread or process based on OS abstraction) can acquire the mutex. 
It means there is ownership associated with a mutex, and only the owner can 
release the lock (mutex). 

Semaphore is a signaling mechanism (“I am done, you can carry on” kind of signal). 
For example, if you are listening to songs (assume it as one task) on your mobile 
phone and at the same time, your friend calls you, an interrupt is triggered upon 
which an interrupt service routine (ISR) signals the call processing task to 
wakeup. 